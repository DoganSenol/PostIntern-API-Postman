{
	"info": {
		"_postman_id": "0f79c85d-8717-4a1d-8fc0-f0152450ec07",
		"name": "PostIntern-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login Positive & Negative",
			"item": [
				{
					"name": "Negative Test Cases",
					"item": [
						{
							"name": "ValidUsernameInvalidPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0b832ac-b9b7-4dcc-a819-3d945ebdf2f2",
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "815c1583-c7f8-4e27-b699-9a8cfbcb1fd2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"turkeyts\",\r\n    \"password\": \"technostudy456\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/auth/login"
							},
							"response": []
						},
						{
							"name": "InvalidUsernameValidPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6e49748-d6f6-4c9f-9c90-8827e3957c2e",
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0ad42fd4-1658-491c-a152-536691b66729",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"TurkeyTs\",\r\n    \"password\": \"Technostudy123\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/auth/login"
							},
							"response": []
						},
						{
							"name": "InvalidUsernameInvalidPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70a935e0-e614-4cc6-b8c1-bfa365a8aef4",
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8667ad91-b589-4ae7-865f-16a482f9d035",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"TurkeyTs\",\r\n    \"password\": \"technostudy456\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/auth/login"
							},
							"response": []
						},
						{
							"name": "EmptyUsernameIValidPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4c452ae-b920-48a0-84f3-736674004dc1",
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "59455db7-825f-4c9f-9b3e-a11007c325ee",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"TechnoStudy123\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/auth/login"
							},
							"response": []
						},
						{
							"name": "ValidUsernameIEmptyPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8551019-722c-4eca-907b-5e0255c61259",
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "39d06953-d0f2-4a1c-aba4-fe12397fc4a5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"turkeyts\",\r\n    \"password\": \"\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/auth/login"
							},
							"response": []
						},
						{
							"name": "EmptyUsernameIEmptyPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c3c2cf5-b5e5-425d-81ec-ff866a5fd607",
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e890d1e3-8e9a-425b-8cb8-bb4825892591",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/auth/login"
							},
							"response": []
						}
					],
					"id": "b5f290f9-e9b8-4e53-99d3-100e0460405b"
				},
				{
					"name": "Positive Test Cases",
					"item": [
						{
							"name": "ValidUsernameValidPasword",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f040b7fc-2147-46b2-8a40-7f84eebec4fa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"An access token is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('access_token')\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"Access token is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Token type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.token_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Refresh token is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.refresh_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Expires in is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.expires_in).to.be.a('number').and.to.be.at.least(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "27024946-8db8-42cc-83ea-3edced79083a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"turkeyts\",\r\n    \"password\": \"TechnoStudy123\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/auth/login"
							},
							"response": []
						}
					],
					"id": "59469c9f-180a-4c59-b261-1a7e795bee5b"
				}
			],
			"id": "53874b22-36b4-4814-88d9-9283b5c3ff63"
		},
		{
			"name": "Setup",
			"item": [
				{
					"name": "Parameters",
					"item": [
						{
							"name": "States",
							"item": [
								{
									"name": "US101-List State",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86f80c9e-cffd-4adb-b71b-4b7f1b21a48a",
												"exec": [
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"country\");",
													"});",
													"",
													"pm.test(\"Student group list has been successfully created\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9b33ceb4-9132-47aa-8457-3203aaa6faa7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\",\n    \"countryId\": \"5baac28d91cefe05fc6e3fe6\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/school-service/api/states/search"
									},
									"response": []
								},
								{
									"name": "US101-Add State",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a53417c-62df-408e-92f2-c4a453801a27",
												"exec": [
													"",
													"var incomingData = pm.response.json();",
													"pm.collectionVariables.set(\"statesID\", incomingData.id);",
													"",
													"",
													"pm.test(\"New states has been added successfully\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "96b04884-4cab-4453-b26b-51a8e7f5175f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"name\": \"Istanbul\",\n  \"shortName\": \"IST\",\n  \"country\": {\n    \"id\": \"63a41a0dcb75ee5c2199a8bc\"\n  },\n  \"translateName\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/school-service/api/states"
									},
									"response": []
								},
								{
									"name": "US101-Add State Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96ee48e9-6c68-4f92-94ca-f394453f92dc",
												"exec": [
													"",
													"pm.test(\"The State with Name 'Istanbul' already exists.\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9bbc60c3-c82f-4807-8088-5c2944f3a577",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"name\": \"Istanbul\",\n  \"shortName\": \"IST\",\n  \"country\": {\n    \"id\": \"63a41a0dcb75ee5c2199a8bc\"\n  },\n  \"translateName\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/school-service/api/states"
									},
									"response": []
								},
								{
									"name": "US101-Search State",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f090080b-8e0f-4370-a5f5-385169c581f0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "84b23eef-8230-4ac1-bdd2-afad44fe9def",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Istanbul\",\n  \"countryId\": \"63a41a0dcb75ee5c2199a8bc\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/school-service/api/states/search"
									},
									"response": []
								},
								{
									"name": "US101-Edit State",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bfe6700d-594e-4b37-9dcf-3c4e9eae554c",
												"exec": [
													"pm.test(\"States has been edited successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d06c3088-e02c-4506-b252-7be7e09f2013",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{statesID}}\",\n  \"name\": \"Istanbul Beykoz\",\n  \"shortName\": \"IST\",\n  \"country\": {\n    \"id\": \"63a41a0dcb75ee5c2199a8bc\"\n  },\n  \"translateName\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/school-service/api/states"
									},
									"response": []
								},
								{
									"name": "US101-Delete State",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c7d4977-19d3-4712-99c0-81d3293b1449",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8f9973b8-251e-466c-ad31-7c88eec2181b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{URL}}/school-service/api/states/{{statesID}}"
									},
									"response": []
								}
							],
							"id": "cc4acbac-a56e-413a-98e8-fef3d13d62e1"
						}
					],
					"id": "32fd30b8-6596-4db1-b692-809ddb91caf2"
				}
			],
			"id": "48d5a2cb-975c-4157-a150-6e461e2e71dd"
		},
		{
			"name": "Student",
			"item": [
				{
					"name": "Student Groups US105",
					"item": [
						{
							"name": "US105-Add a New Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd8fcc60-e16f-4ec1-a5f1-c8e509456a3c",
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var studentGroupId = responseBody.id;\r",
											"var studentGroupName = responseBody.name;\r",
											"\r",
											"pm.collectionVariables.set(\"studentGroupId\",studentGroupId);\r",
											"pm.collectionVariables.set(\"studentGroupName\",studentGroupName);\r",
											"\r",
											"pm.test('Status code is 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().id).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An schoolId variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().schoolId).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().name).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An description variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().description).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An count variable is exist and number\", function () {\r",
											"    pm.expect(pm.response.json().count).is.exist.and.to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is exist and boolean\", function () {\r",
											"    pm.expect(pm.response.json().active).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"An publicGroup variable is exist and boolean\", function () {\r",
											"    pm.expect(pm.response.json().publicGroup).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id showToStudent is exist and boolean\", function () {\r",
											"    pm.expect(pm.response.json().showToStudent).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"The name variable has less than 1000 character\", function () {\r",
											"    pm.expect(pm.response.json().name.length).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"The description variable has less than 5000 character\", function () {\r",
											"    pm.expect(pm.response.json().description.length).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/*\r",
											"var responseData = pm.response.json();\r",
											"pm.test('Verify all properties for each item', function () {\r",
											"    _.each(responseData, function(item) {\r",
											"        pm.expect(item).to.have.property('id').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('description').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('count').that.is.a('number').and.not.empty;\r",
											"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('publicGroup').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('showToStudent').that.is.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A schoolId variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('schoolId');\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"A description variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"A count variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('count');\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('active');\r",
											"});\r",
											"\r",
											"pm.test(\"A publicGroup variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('publicGroup');\r",
											"});\r",
											"\r",
											"pm.test(\"A showToStudent variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('showToStudent');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b3b5932f-7c15-462e-913a-80c1597f6559",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomJobArea}} - {{$randomAbbreviation}}\",\r\n    \"description\": \"{{$randomJobDescriptor}}\",\r\n    \"publicGroup\": \"{{$randomBoolean}}\",\r\n    \"showToStudent\": \"{{$randomBoolean}}\",\r\n    \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/school-service/api/student-group"
							},
							"response": []
						},
						{
							"name": "US105-Add a New Student Group Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fcd9db5-1e0d-4692-a7db-619c5345a67e",
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"A type variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().type).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A status variable is exist and number\", function () {\r",
											"    pm.expect(pm.response.json().status).is.exist.and.to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"A detail variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().detail).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A path variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().path).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An code variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('code');\r",
											"});\r",
											"\r",
											"pm.test(\"An message variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().message).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An lang variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('lang');\r",
											"});\r",
											"\r",
											"pm.test(\"An uri variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('uri');\r",
											"});\r",
											"\r",
											"\r",
											"/*\r",
											"var responseData = pm.response.json();\r",
											"pm.test('Verify all properties for each item', function () {\r",
											"    _.each(responseData, function(item) {\r",
											"        pm.expect(item).to.have.property('id').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('description').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('count').that.is.a('number').and.not.empty;\r",
											"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('publicGroup').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('showToStudent').that.is.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A schoolId variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('schoolId');\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"A description variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"A count variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('count');\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('active');\r",
											"});\r",
											"\r",
											"pm.test(\"A publicGroup variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('publicGroup');\r",
											"});\r",
											"\r",
											"pm.test(\"A showToStudent variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('showToStudent');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e331c732-279b-4bb5-9ebc-af1bb11b4363",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{studentGroupName}}\",\r\n    \"description\": \"{{$randomJobDescriptor}}\",\r\n    \"publicGroup\": \"{{$randomBoolean}}\",\r\n    \"showToStudent\": \"{{$randomBoolean}}\",\r\n    \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/school-service/api/student-group"
							},
							"response": []
						},
						{
							"name": "US105-Edit Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "053e1ca9-c7ca-4ea4-ae8c-4531f33e2a4e",
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().id).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().schoolId).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().name).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().description).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().count).is.exist.and.to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().active).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().publicGroup).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().showToStudent).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"Name variable has less than 1000 character\", function () {\r",
											"    pm.expect(pm.response.json().name.length).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Description variable has less than 5000 character\", function () {\r",
											"    pm.expect(pm.response.json().description.length).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/*\r",
											"var responseData = pm.response.json();\r",
											"pm.test('Verify all properties for each item', function () {\r",
											"    _.each(responseData, function(item) {\r",
											"        pm.expect(item).to.have.property('id').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('description').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('count').that.is.a('number').and.not.empty;\r",
											"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('publicGroup').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('showToStudent').that.is.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A schoolId variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('schoolId');\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"A description variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"A count variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('count');\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('active');\r",
											"});\r",
											"\r",
											"pm.test(\"A publicGroup variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('publicGroup');\r",
											"});\r",
											"\r",
											"pm.test(\"A showToStudent variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('showToStudent');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cb58e211-ead2-4623-afab-d5c98bc92876",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{studentGroupId}}\",\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"name\": \"{{$randomJobType}} - {{$randomAbbreviation}}\",\r\n  \"description\": \"{{$randomJobDescriptor}}\",\r\n  \"active\": \"{{$randomBoolean}}\",\r\n  \"publicGroup\": \"{{$randomBoolean}}\",\r\n  \"showToStudent\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/school-service/api/student-group/"
							},
							"response": []
						},
						{
							"name": "US105-Delete Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb2d4b50-0a4d-4d19-a2f6-c1fc373e4198",
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ec149dac-c34f-4c27-9fb4-a86f998df0ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{URL}}/school-service/api/student-group/{{studentGroupId}}"
							},
							"response": []
						},
						{
							"name": "US105-Delete Student Group Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc728b2d-da8f-4589-9aaa-076ceb9543be",
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"A type variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().type).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A status variable is exist and number\", function () {\r",
											"    pm.expect(pm.response.json().status).is.exist.and.to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"A detail variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().detail).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A path variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().path).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An code variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('code');\r",
											"});\r",
											"\r",
											"pm.test(\"An message variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().message).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An lang variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('lang');\r",
											"});\r",
											"\r",
											"pm.test(\"An uri variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('uri');\r",
											"});\r",
											"\r",
											"\r",
											"/*\r",
											"var responseData = pm.response.json();\r",
											"pm.test('Verify all properties for each item', function () {\r",
											"    _.each(responseData, function(item) {\r",
											"        pm.expect(item).to.have.property('id').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('description').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('count').that.is.a('number').and.not.empty;\r",
											"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('publicGroup').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('showToStudent').that.is.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A schoolId variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('schoolId');\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"A description variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"A count variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('count');\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('active');\r",
											"});\r",
											"\r",
											"pm.test(\"A publicGroup variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('publicGroup');\r",
											"});\r",
											"\r",
											"pm.test(\"A showToStudent variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('showToStudent');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aae98161-5d92-4014-96ed-f236401ee5e2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{URL}}/school-service/api/student-group/{{studentGroupId}}"
							},
							"response": []
						}
					],
					"id": "2c210e6e-f245-424d-9eb7-f324f7b39c79"
				},
				{
					"name": "Student Groups US106",
					"item": [
						{
							"name": "US106-List Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5df4e1a-2a59-43cc-9350-15a179078462",
										"exec": [
											"pm.test(\"States list has been successfully created\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0493269a-abd9-4fc7-a652-02a7a6299215",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": null,\n  \"description\": null,\n  \"publicGroup\": null,\n  \"showToStudent\": null,\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/school-service/api/student-group/search"
							},
							"response": []
						},
						{
							"name": "US106-Create Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "512863f6-a211-4195-96ce-8fc60f718d21",
										"exec": [
											"var incomingData = pm.response.json();",
											"pm.collectionVariables.set(\"groupID\", incomingData.id);",
											"",
											"pm.test(\"New states has been added successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bb4a5498-27f5-4411-b5c2-d36aab7286a7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"schoolId\": \"646cbb07acf2ee0d37c6d984\",\n    \"name\": \"TechStudy35\",\n    \"description\": \"Happy coding for everyone :)\",\n    \"active\": true,\n    \"publicGroup\": true,\n    \"showToStudent\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/school-service/api/student-group"
							},
							"response": []
						},
						{
							"name": "US106-Select Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00516f9d-8295-4132-8a1d-dabffdd838d2",
										"exec": [
											"",
											"pm.test(\"New states has been added successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5b239742-a9b7-4458-8b0e-ccb11d1995d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/students/group/{{groupID}}?page=0&size=10",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"students",
										"group",
										"{{groupID}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "US106-Add Student to Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9227477b-bc9d-48b9-bdde-bfaa02921956",
										"exec": [
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"New states has been added successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b912b3b9-fafe-4969-b289-db65cec79121",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"646dfdfaab1d8d3d700f1035\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/student-group/{{groupID}}/add-students?page=0&size=10",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group",
										"{{groupID}}",
										"add-students"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "06d1bc7c-ec3a-4a04-bb7f-5401b82bc218"
				}
			],
			"id": "3828b27d-76e5-445a-b34f-5b4f59df4a83"
		},
		{
			"name": "Entrance Exams",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Entrance Exams",
							"item": [
								{
									"name": "US103-Create Exam",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b318737-b924-41e1-82ff-242abb385338",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ExamID\",incomingData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3734dd3f-da25-45f1-b6c5-08dc2a90eb80",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{$randomLastName}}\",\r\n  \"translateName\": [],\r\n  \"school\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"gradeLevel\": {\r\n    \"id\": \"654898fae70d9e34a8331e51\"\r\n  },\r\n  \"academicPeriod\": \"6509eba5f640da7207ab120c\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"note\": \"\",\r\n  \"agreementText\": \"\",\r\n  \"sendSMS\": false,\r\n  \"sms\": \"\",\r\n  \"sendEmailEnabled\": false,\r\n  \"emailMessage\": {\r\n    \"subject\": \"\",\r\n    \"content\": \"\"\r\n  },\r\n  \"registrationStartDate\": null,\r\n  \"registrationEndDate\": null,\r\n  \"paid\": false,\r\n  \"sendEmailToRegistrar\": false,\r\n  \"registrarEmails\": [],\r\n  \"showDescFirst\": false,\r\n  \"showNoteFirst\": false,\r\n  \"noteEnabled\": false,\r\n  \"descEnabled\": false,\r\n  \"agreementEnabled\": false,\r\n  \"documents\": [],\r\n  \"bankAccount\": null,\r\n  \"price\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/exams"
									},
									"response": []
								},
								{
									"name": "US103-Edit Exam",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3455b3f5-bcd8-44a4-8e74-96e038a08c8a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a2ca507c-e968-47cf-9cf6-3b281a0a1ac2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{ExamID}}\",\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"translateName\": [],\r\n  \"school\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"gradeLevel\": {\r\n    \"id\": \"654898fae70d9e34a8331e51\"\r\n  },\r\n  \"academicPeriod\": \"6509eba5f640da7207ab120c\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"note\": \"\",\r\n  \"agreementText\": \"\",\r\n  \"sendSMS\": false,\r\n  \"sms\": \"\",\r\n  \"sendEmailEnabled\": false,\r\n  \"emailMessage\": {\r\n    \"subject\": \"\",\r\n    \"content\": \"\"\r\n  },\r\n  \"registrationStartDate\": null,\r\n  \"registrationEndDate\": null,\r\n  \"paid\": false,\r\n  \"sendEmailToRegistrar\": false,\r\n  \"registrarEmails\": [],\r\n  \"showDescFirst\": false,\r\n  \"showNoteFirst\": false,\r\n  \"noteEnabled\": false,\r\n  \"descEnabled\": false,\r\n  \"agreementEnabled\": false,\r\n  \"documents\": [],\r\n  \"bankAccount\": null,\r\n  \"price\": 0,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/exams"
									},
									"response": []
								},
								{
									"name": "US103-Delet Exam",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea7681c0-4cea-48d0-8aca-8a58bdc604cc",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "68962651-6991-4d80-82c0-0b131a83e32a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/exams/{{ExamID}}"
									},
									"response": []
								},
								{
									"name": "US103-Blank Exam Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "386d440c-16b4-443f-ac07-84257d58f496",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "01d977b6-31cd-4b51-964d-f7b4920c3dd1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"\",\r\n  \"translateName\": [],\r\n  \"school\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"gradeLevel\": {\r\n    \"id\": \"654898fae70d9e34a8331e51\"\r\n  },\r\n  \"academicPeriod\": \"6509eba5f640da7207ab120c\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"note\": \"\",\r\n  \"agreementText\": \"\",\r\n  \"sendSMS\": false,\r\n  \"sms\": \"\",\r\n  \"sendEmailEnabled\": false,\r\n  \"emailMessage\": {\r\n    \"subject\": \"\",\r\n    \"content\": \"\"\r\n  },\r\n  \"registrationStartDate\": null,\r\n  \"registrationEndDate\": null,\r\n  \"paid\": false,\r\n  \"sendEmailToRegistrar\": false,\r\n  \"registrarEmails\": [],\r\n  \"showDescFirst\": false,\r\n  \"showNoteFirst\": false,\r\n  \"noteEnabled\": false,\r\n  \"descEnabled\": false,\r\n  \"agreementEnabled\": false,\r\n  \"documents\": [],\r\n  \"bankAccount\": null,\r\n  \"price\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/exams"
									},
									"response": []
								},
								{
									"name": "US103-Negatif Edit Exam",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e09fe2b6-173e-45c5-bef2-21607c12ee06",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a032d60e-2203-46bc-9603-a08b3c8a163c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{ExamID}}\",\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"translateName\": [],\r\n  \"school\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"gradeLevel\": {\r\n    \"id\": \"654898fae70d9e34a8331e51\"\r\n  },\r\n  \"academicPeriod\": \"6509eba5f640da7207ab120c\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"note\": \"\",\r\n  \"agreementText\": \"\",\r\n  \"sendSMS\": false,\r\n  \"sms\": \"\",\r\n  \"sendEmailEnabled\": false,\r\n  \"emailMessage\": {\r\n    \"subject\": \"\",\r\n    \"content\": \"\"\r\n  },\r\n  \"registrationStartDate\": null,\r\n  \"registrationEndDate\": null,\r\n  \"paid\": false,\r\n  \"sendEmailToRegistrar\": false,\r\n  \"registrarEmails\": [],\r\n  \"showDescFirst\": false,\r\n  \"showNoteFirst\": false,\r\n  \"noteEnabled\": false,\r\n  \"descEnabled\": false,\r\n  \"agreementEnabled\": false,\r\n  \"documents\": [],\r\n  \"bankAccount\": null,\r\n  \"price\": 0,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/exams"
									},
									"response": []
								}
							],
							"id": "86f87857-61a7-48e0-ab01-cc0c186c0ffb"
						},
						{
							"name": "Custom Field Group",
							"item": [
								{
									"name": "US104-Create Custom Field Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c849b972-d976-4c53-b681-ed207dee06f8",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"CustomID\",incomingData.id);\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "67de8e2d-ae82-40a3-9db8-41ccac02e476",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"orderNo\": 10,\r\n  \"columnSize\": 1,\r\n  \"translateName\": [],\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/custom-field-groups"
									},
									"response": []
								},
								{
									"name": "US104-Create Custom Field Group Nigativ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e312eba-b677-44b2-a000-ccae20c780b5",
												"exec": [
													"pm.test(\"Bu Order de Group Mevcut\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a7445083-54e0-4228-870f-da16a4bc3e46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"orderNo\": 10,\r\n  \"columnSize\": 1,\r\n  \"translateName\": [],\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/custom-field-groups"
									},
									"response": []
								},
								{
									"name": "US104-Custom Field Group Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75fbb58c-9c2f-4e52-bb4d-cc7716e6ba69",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b1404e64-9544-42ff-a407-25fed7aa01a2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{CustomID}}\",\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"orderNo\": 10,\r\n  \"columnSize\": 1,\r\n  \"translateName\": [],\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/custom-field-groups"
									},
									"response": []
								},
								{
									"name": "US104-Custom Field Group Edit Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17558af0-425b-4807-bb18-987bf670ad43",
												"exec": [
													"pm.test(\"Bu Order de Group Mevcut\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e8c583f3-373e-42fc-86ab-543f7ffbf8b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{CustomID}}\",\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"orderNo\": 1,\r\n  \"columnSize\": 1,\r\n  \"translateName\": [],\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/custom-field-groups"
									},
									"response": []
								},
								{
									"name": "US104-Delete Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae0db878-6474-4ccc-9a17-27a465799286",
												"exec": [
													"pm.test(\"Basarli silindi\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8a631c83-7215-40a7-aa7c-f2e8a59a561e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/school-service/api/custom-field-groups/{{CustomID}}"
									},
									"response": []
								},
								{
									"name": "US104-Delete Group Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "360851e9-c4b7-4e78-b6ba-b2e113df4b1e",
												"exec": [
													"pm.test(\"Silmek istedininz Group mevcut degil\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d855f31a-b9b1-41c8-b42f-592b82359caf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/school-service/api/custom-field-groups/{{CustomID}}"
									},
									"response": []
								}
							],
							"id": "6235f426-b492-420a-be5c-a25554e848c2"
						}
					],
					"id": "ebf4ae2d-12ad-41a5-9a33-0f679ba99def"
				}
			],
			"id": "b0d71bc6-4edc-4589-b3c3-77c93d2eefa2"
		},
		{
			"name": "Education",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Education Standard",
							"item": [
								{
									"name": "US108-Get All Education Standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddb817fc-7511-4df8-9923-54c1c724581d",
												"exec": [
													"pm.test(\"Listilendi\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a1b202dd-4dfa-4292-82f1-03103f9b2e3b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/education-standard/school/{{schoolID}}"
									},
									"response": []
								},
								{
									"name": "US108-Add Education Standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8aeab2bf-e647-4caa-9709-aa153b56f2a2",
												"exec": [
													"pm.test(\"Basarli\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"EducationID\",incomingData.id);\r",
													"pm.collectionVariables.set(\"schoolID\",incomingData.schoolId)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "39f16af6-e0bc-47b1-a647-6c918fc30e51",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{$randomBankAccountName}}\",\r\n  \"description\": null,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/education-standard"
									},
									"response": []
								},
								{
									"name": "US108-Edit Education Standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6d4ab5b-dd87-47e8-96ae-61e5a147f47e",
												"exec": [
													"pm.test(\"Education Standard successfully updated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8f5b34bc-a971-413c-915f-57b9b405e085",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{EducationID}}\",\r\n  \"name\": \"{{$randomCity}}\",\r\n  \"description\": null,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/school-service/api/education-standard"
									},
									"response": []
								},
								{
									"name": "US108-Delete Education",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adfbdd11-0ed8-476e-8b68-0b1c6b675a41",
												"exec": [
													"pm.test(\"Education Standards successfully deleted\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1549440f-67a1-4052-8c49-09953438c768",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/school-service/api/education-standard/{{EducationID}}"
									},
									"response": []
								},
								{
									"name": "US108-Delete Education Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0ed576c-a65e-4a68-bf4d-5dfbd598250a",
												"exec": [
													"pm.test(\"No such thing\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2fac3127-8177-43eb-b58c-21f3188ed03b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/school-service/api/education-standard/{{EducationID}}"
									},
									"response": []
								}
							],
							"id": "fd93e77a-469c-4362-8f84-ca8983328979"
						},
						{
							"name": "Grading Schema",
							"item": [
								{
									"name": "US109-Grading Scheme- Get List",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef08da13-0f92-4552-b188-36a3c4ddb105",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test('Verify all properties for each item', function () {\r",
													"    _.each(responseData, function(item) {\r",
													"        pm.expect(item).to.have.property('id');\r",
													"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
													"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
													"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
													"        pm.expect(item).to.have.property('gradeRanges').that.is.an('array');\r",
													"        pm.expect(item).to.have.property('type').that.is.a('string').and.not.empty;\r",
													"        pm.expect(item).to.have.property('enablePoint').that.is.a('boolean');\r",
													"    });\r",
													"});\r",
													"pm.test(\"Grading Schemes listed\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cfb02f93-5a4d-47ec-8a93-8d1eda8af41d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://test.mersys.io/school-service/api/grading-schemes/school/{{schoolID}}/search"
									},
									"response": []
								},
								{
									"name": "US109-Create One Grading Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd684e1d-2f3b-478e-bc1e-419a19b997fb",
												"exec": [
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('name');\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains expected properties\", function () {\r",
													"    // Response body JSON formatında olduğundan emin olun\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Response body içerisinde beklenen özelliklerin olup olmadığını kontrol etme\r",
													"    pm.expect(responseBody).to.have.property('id');\r",
													"    pm.expect(responseBody).to.have.property('schoolId');\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Grading Sheme has been successfully created\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7f79fb2c-3f5f-4282-9646-64b66ebed1cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{$randomCompanyName}}\",\r\n  \"active\": true,\r\n  \"type\": \"POINT\",\r\n  \"enablePoint\": false,\r\n  \"schoolId\": \"{{schoolID}}\",\r\n  \"gradeRanges\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://test.mersys.io/school-service/api/grading-schemes"
									},
									"response": []
								},
								{
									"name": "US109-Edit Grading Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "988a8fb4-5fa2-45c7-8357-6ca5cc691879",
												"exec": [
													"pm.test(\"Grading Scheme has been successfully updated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1e281268-d025-4c89-a452-4cd2fdb789fb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"659032c4cacea97f2a0cb0b4\",\r\n    \"name\": \"Leffler LLC78\",\r\n    \"active\": true,\r\n    \"schoolId\": \"646cbb07acf2ee0d37c6d984\",\r\n    \"gradeRanges\": [],\r\n    \"type\": \"POINT\",\r\n    \"enablePoint\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://test.mersys.io/school-service/api/grading-schemes"
									},
									"response": []
								},
								{
									"name": "US109-Delete Grading Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b7a9798-305b-4b12-a632-07f305278868",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "087eb90f-8ce3-452c-b7a2-f369fc8d15bc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "https://test.mersys.io/school-service/api/grading-schemes/659032c4cacea97f2a0cb0b4"
									},
									"response": []
								}
							],
							"id": "75ffed4a-2c0c-4d79-8050-23c9cb04d045"
						}
					],
					"id": "df4f3779-418a-4940-92ab-cf33972f635e"
				}
			],
			"id": "ff0d5ba5-7c32-4205-9a51-f99c47b31b42"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ac929e67-9fe2-407e-8f6c-4e7981cc4e4d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a6dcb32b-6a0a-4584-8d74-02efb6365077",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "GradingSchemeID",
			"value": ""
		},
		{
			"key": "schoolID",
			"value": "",
			"type": "string"
		},
		{
			"key": "URL",
			"value": "https://test.mersys.io",
			"type": "string"
		},
		{
			"key": "studentGroupId",
			"value": "",
			"type": "string"
		},
		{
			"key": "studentSchoolId",
			"value": "646cbb07acf2ee0d37c6d984",
			"type": "string"
		},
		{
			"key": "studentGroupName",
			"value": "",
			"type": "string"
		},
		{
			"key": "baseURL",
			"value": " https://test.mersys.io",
			"type": "string"
		},
		{
			"key": "ExamID",
			"value": ""
		},
		{
			"key": "groupID",
			"value": ""
		},
		{
			"key": "statesID",
			"value": ""
		}
	]
}